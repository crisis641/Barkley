
#include "ShaderFactory.h"

namespace barkley{ namespace graphics { namespace ShaderFactory {

#if  defined(BARKLEY_PLATFORM_WIN32)
	#pragma region default_shader_vert_windows
	const char* default_shader_vert =
		"#version 330 core\n"
		"\n"
		"layout(location = 0) in vec4 position;\n"
		"layout(location = 1) in vec2 uv;\n"
		"layout(location = 2) in vec2 mask_uv;\n"
		"layout(location = 3) in float tid;\n"
		"layout(location = 4) in float mask_id;\n"
		"layout(location = 5) in vec4 color;\n"
		"\n"
		"uniform mat4 pr_matrix;\n"
		"uniform mat4 vw_matrix = mat4(1.0);\n"
		"uniform mat4 ml_matrix = mat4(1.0);\n"
		"\n"
		"uniform mat4 mask_matrix;\n"
		"\n"
		"out DATA\n"
		"{\n"
		"   vec4 position;\n"
		"	vec2 uv;\n"
		"	vec2 mask_uv;\n"
		"	float tid;\n"
		"	float mask_id;\n"
		"	vec4 color;\n"
		"\n"
		"} vs_out;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	\n"
		"	gl_Position = pr_matrix * vw_matrix * ml_matrix * position; \n"
		"	vs_out.position = ml_matrix * position;\n"
		"	vs_out.uv = uv;\n"
		"   vs_out.mask_uv = (mask_matrix * gl_Position).xy * 0.5 + 0.5;\n"
		"	vs_out.tid = tid;\n"
		"   vs_out.mask_id = mask_id;\n"
		"	vs_out.color = color;\n"
		"}\n";
#pragma endregion default_shader_vert_windows

	#pragma region default_shader_frag_windows
		const char* default_shader_frag =
	"#version 330 core\n"
	"\n"
	"layout (location = 0) out vec4 color;\n"
	"\n"
	"\n"
	"in DATA\n"
	"{\n"
	"    vec4 position;\n"
	"	 vec2 uv;\n"
	"	 vec2 mask_uv;\n"
	"	 float tid;\n"
	"	 float mask_id;\n"
	"	 vec4 color;\n"
	"\n"
	"} fs_in;\n"
	"\n"
	"uniform sampler2D textures[32];\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec4 texColor = fs_in.color;\n"
	"	vec4 maskColor = vec4( 1.0, 1.0, 1.0, 1.0);\n"
	"	if (fs_in.tid > 0.0)\n"
	"	{\n"
	"		int t_id = int(fs_in.tid - 0.5);\n"
	"		switch(t_id)\n"
	"		{\n"
	"		case 0: texColor = fs_in.color * texture(textures[0], fs_in.uv); break;\n"
	"		case 1: texColor = fs_in.color * texture(textures[1], fs_in.uv); break;\n"
	"		case 2: texColor = fs_in.color * texture(textures[2], fs_in.uv); break;\n"
	"		case 3: texColor = fs_in.color * texture(textures[3], fs_in.uv); break;\n"
	"		case 4: texColor = fs_in.color * texture(textures[4], fs_in.uv); break;\n"
	"		case 5: texColor = fs_in.color * texture(textures[5], fs_in.uv); break;\n"
	"		case 6: texColor = fs_in.color * texture(textures[6], fs_in.uv); break;\n"
	"		case 7: texColor = fs_in.color * texture(textures[7], fs_in.uv); break;\n"
	"		case 8: texColor = fs_in.color * texture(textures[8], fs_in.uv); break;\n"
	"		case 9: texColor = fs_in.color * texture(textures[9], fs_in.uv); break;\n"
	"		case 10: texColor = fs_in.color * texture(textures[10], fs_in.uv); break;\n"
	"		case 11: texColor = fs_in.color * texture(textures[11], fs_in.uv); break;\n"
	"		case 12: texColor = fs_in.color * texture(textures[12], fs_in.uv); break;\n"
	"		case 13: texColor = fs_in.color * texture(textures[13], fs_in.uv); break;\n"
	"		case 14: texColor = fs_in.color * texture(textures[14], fs_in.uv); break;\n"
	"		case 15: texColor = fs_in.color * texture(textures[15], fs_in.uv); break;\n"
	"		case 16: texColor = fs_in.color * texture(textures[16], fs_in.uv); break;\n"
	"		case 17: texColor = fs_in.color * texture(textures[17], fs_in.uv); break;\n"
	"		case 18: texColor = fs_in.color * texture(textures[18], fs_in.uv); break;\n"
	"		case 19: texColor = fs_in.color * texture(textures[19], fs_in.uv); break;\n"
	"		case 20: texColor = fs_in.color * texture(textures[20], fs_in.uv); break;\n"
	"		case 21: texColor = fs_in.color * texture(textures[21], fs_in.uv); break;\n"
	"		case 22: texColor = fs_in.color * texture(textures[22], fs_in.uv); break;\n"
	"		case 23: texColor = fs_in.color * texture(textures[23], fs_in.uv); break;\n"
	"		case 24: texColor = fs_in.color * texture(textures[24], fs_in.uv); break;\n"
	"		case 25: texColor = fs_in.color * texture(textures[25], fs_in.uv); break;\n"
	"		case 26: texColor = fs_in.color * texture(textures[26], fs_in.uv); break;\n"
	"		case 27: texColor = fs_in.color * texture(textures[27], fs_in.uv); break;\n"
	"		case 28: texColor = fs_in.color * texture(textures[28], fs_in.uv); break;\n"
	"		case 29: texColor = fs_in.color * texture(textures[29], fs_in.uv); break;\n"
	"		case 30: texColor = fs_in.color * texture(textures[30], fs_in.uv); break;\n"
	"		case 31: texColor = fs_in.color * texture(textures[31], fs_in.uv); break;\n"
	"		}\n"
	"	}\n"
	"	if(fs_in.mask_id > 0.0)\n"
	"	{\n"
	"		int m_id = int(fs_in.mask_id - 0.5);\n"
	"			switch(m_id)\n"
	"			{\n"	
	"			case 0: maskColor = texture(textures[0], fs_in.mask_uv); break;\n"
	"			case 1: maskColor = texture(textures[1], fs_in.mask_uv); break;\n"
	"			case 2: maskColor = texture(textures[2], fs_in.mask_uv); break;\n"
	"			case 3: maskColor = texture(textures[3], fs_in.mask_uv); break;\n"
	"			case 4: maskColor = texture(textures[4], fs_in.mask_uv); break;\n"
	"			case 5: maskColor = texture(textures[5], fs_in.mask_uv); break;\n"
	"			case 6: maskColor = texture(textures[6], fs_in.mask_uv); break;\n"
	"			case 7: maskColor = texture(textures[7], fs_in.mask_uv); break;\n"
	"			case 8: maskColor = texture(textures[8], fs_in.mask_uv); break;\n"
	"			case 9: maskColor = texture(textures[9], fs_in.mask_uv); break;\n"
	"			case 10: maskColor = texture(textures[10], fs_in.mask_uv); break;\n"
	"			case 11: maskColor = texture(textures[11], fs_in.mask_uv); break;\n"
	"			case 12: maskColor = texture(textures[12], fs_in.mask_uv); break;\n"
	"			case 13: maskColor = texture(textures[13], fs_in.mask_uv); break;\n"
	"			case 14: maskColor = texture(textures[14], fs_in.mask_uv); break;\n"
	"			case 15: maskColor = texture(textures[15], fs_in.mask_uv); break;\n"
	"			case 16: maskColor = texture(textures[16], fs_in.mask_uv); break;\n"
	"			case 17: maskColor = texture(textures[17], fs_in.mask_uv); break;\n"
	"			case 18: maskColor = texture(textures[18], fs_in.mask_uv); break;\n"
	"			case 19: maskColor = texture(textures[19], fs_in.mask_uv); break;\n"
	"			case 20: maskColor = texture(textures[20], fs_in.mask_uv); break;\n"
	"			case 21: maskColor = texture(textures[21], fs_in.mask_uv); break;\n"
	"			case 22: maskColor = texture(textures[22], fs_in.mask_uv); break;\n"
	"			case 23: maskColor = texture(textures[23], fs_in.mask_uv); break;\n"
	"			case 24: maskColor = texture(textures[24], fs_in.mask_uv); break;\n"
	"			case 25: maskColor = texture(textures[25], fs_in.mask_uv); break;\n"
	"			case 26: maskColor = texture(textures[26], fs_in.mask_uv); break;\n"
	"			case 27: maskColor = texture(textures[27], fs_in.mask_uv); break;\n"
	"			case 28: maskColor = texture(textures[28], fs_in.mask_uv); break;\n"
	"			case 29: maskColor = texture(textures[29], fs_in.mask_uv); break;\n"
	"			case 30: maskColor = texture(textures[30], fs_in.mask_uv); break;\n"
	"			case 31: maskColor = texture(textures[31], fs_in.mask_uv); break;\n"
	"			}\n"
	"	}\n"
	"	color = texColor * maskColor;\n"
	"\n"
	"}\n";
#pragma endregion default_shader_frag_windows

	#pragma region basic_light_shader_vert_windows
	const char* basic_light_shader_vert =
		"#version 330 core\n"
		"\n"
		"layout(location = 0) in vec4 position;\n"
		"layout(location = 1) in vec2 uv;\n"
		"layout(location = 2) in vec2 mask_uv;\n"
		"layout(location = 3) in float tid;\n"
		"layout(location = 4) in float mask_id;\n"
		"layout(location = 5) in vec4 color;\n"
		"\n"
		"uniform mat4 pr_matrix;\n"
		"uniform mat4 vw_matrix = mat4(1.0);\n"
		"uniform mat4 ml_matrix = mat4(1.0);\n"
		"\n"
		"uniform mat4 mask_matrix;\n"
		"\n"
		"out DATA\n"
		"{\n"
		"   vec4 position;\n"
		"	vec2 uv;\n"
		"	vec2 mask_uv;\n"
		"	float tid;\n"
		"	float mask_id;\n"
		"	vec4 color;\n"
		"} vs_out;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	\n"
		"	gl_Position = pr_matrix * vw_matrix * ml_matrix * position; \n"
		"	vs_out.position = ml_matrix * position;\n"
		"	vs_out.uv = uv;\n"
		"	vs_out.mask_uv = (mask_matrix * gl_Position).xy * 0.5 + 0.5;\n"
		"	vs_out.tid = tid;\n"
		"	vs_out.mask_id = mask_id;\n"
		"	vs_out.color = color;\n"
		"}\n";
	#pragma endregion basic_light_shader_vert_windows

	#pragma region basic_light_shader_frag_windows
	const char* basic_light_shader_frag =
		"#version 330 core\n"
		"\n"
		"layout (location = 0) out vec4 color;\n"
		"\n"
		"uniform vec4 col;\n"
		"uniform vec2 light_pos;\n"
		"\n"
		"in DATA\n"
		"{\n"
		"	vec4 position;\n"
		"	vec2 uv;\n"
		"	vec2 mask_uv;\n"
		"	float tid;\n"
		"	float mask_id;\n"
		"	vec4 color;\n"
		"} fs_in;\n"
		"\n"
		"uniform sampler2D textures[32];\n"
		"\n"
		"void main()\n"
		"{\n"
		"	float intensity = 1.0 / length(fs_in.position.xy - light_pos);\n"
		"	vec4 texColor = fs_in.color;\n"
		"	vec4 maskColor = vec4( 1.0, 1.0, 1.0, 1.0);\n"
		"	if (fs_in.tid > 0.0)\n"
		"	{\n"
		"		int t_id = int(fs_in.tid - 0.5);\n"
		"		switch(t_id)\n"
		"		{\n"
		"			case 0: texColor = fs_in.color * texture(textures[0], fs_in.uv); break;\n"
		"			case 1: texColor = fs_in.color * texture(textures[1], fs_in.uv); break;\n"
		"			case 2: texColor = fs_in.color * texture(textures[2], fs_in.uv); break;\n"
		"			case 3: texColor = fs_in.color * texture(textures[3], fs_in.uv); break;\n"
		"			case 4: texColor = fs_in.color * texture(textures[4], fs_in.uv); break;\n"
		"			case 5: texColor = fs_in.color * texture(textures[5], fs_in.uv); break;\n"
		"			case 6: texColor = fs_in.color * texture(textures[6], fs_in.uv); break;\n"
		"			case 7: texColor = fs_in.color * texture(textures[7], fs_in.uv); break;\n"
		"			case 8: texColor = fs_in.color * texture(textures[8], fs_in.uv); break;\n"
		"			case 9: texColor = fs_in.color * texture(textures[9], fs_in.uv); break;\n"
		"			case 10: texColor = fs_in.color * texture(textures[10], fs_in.uv); break;\n"
		"			case 11: texColor = fs_in.color * texture(textures[11], fs_in.uv); break;\n"
		"			case 12: texColor = fs_in.color * texture(textures[12], fs_in.uv); break;\n"
		"			case 13: texColor = fs_in.color * texture(textures[13], fs_in.uv); break;\n"
		"			case 14: texColor = fs_in.color * texture(textures[14], fs_in.uv); break;\n"
		"			case 15: texColor = fs_in.color * texture(textures[15], fs_in.uv); break;\n"
		"			case 16: texColor = fs_in.color * texture(textures[16], fs_in.uv); break;\n"
		"			case 17: texColor = fs_in.color * texture(textures[17], fs_in.uv); break;\n"
		"			case 18: texColor = fs_in.color * texture(textures[18], fs_in.uv); break;\n"
		"			case 19: texColor = fs_in.color * texture(textures[19], fs_in.uv); break;\n"
		"			case 20: texColor = fs_in.color * texture(textures[20], fs_in.uv); break;\n"
		"			case 21: texColor = fs_in.color * texture(textures[21], fs_in.uv); break;\n"
		"			case 22: texColor = fs_in.color * texture(textures[22], fs_in.uv); break;\n"
		"			case 23: texColor = fs_in.color * texture(textures[23], fs_in.uv); break;\n"
		"			case 24: texColor = fs_in.color * texture(textures[24], fs_in.uv); break;\n"
		"			case 25: texColor = fs_in.color * texture(textures[25], fs_in.uv); break;\n"
		"			case 26: texColor = fs_in.color * texture(textures[26], fs_in.uv); break;\n"
		"			case 27: texColor = fs_in.color * texture(textures[27], fs_in.uv); break;\n"
		"			case 28: texColor = fs_in.color * texture(textures[28], fs_in.uv); break;\n"
		"			case 29: texColor = fs_in.color * texture(textures[29], fs_in.uv); break;\n"
		"			case 30: texColor = fs_in.color * texture(textures[30], fs_in.uv); break;\n"
		"			case 31: texColor = fs_in.color * texture(textures[31], fs_in.uv); break;\n"
		"		}\n"
		"	}\n"
		"	if(fs_in.mask_id > 0.0)\n"
		"	{\n"
		"		int m_id = int(fs_in.mask_id - 0.5);\n"
		"			switch(m_id)\n"
		"			{\n"
		"			case 0: maskColor = texture(textures[0], fs_in.mask_uv); break;\n"
		"			case 1: maskColor = texture(textures[1], fs_in.mask_uv); break;\n"
		"			case 2: maskColor = texture(textures[2], fs_in.mask_uv); break;\n"
		"			case 3: maskColor = texture(textures[3], fs_in.mask_uv); break;\n"
		"			case 4: maskColor = texture(textures[4], fs_in.mask_uv); break;\n"
		"			case 5: maskColor = texture(textures[5], fs_in.mask_uv); break;\n"
		"			case 6: maskColor = texture(textures[6], fs_in.mask_uv); break;\n"
		"			case 7: maskColor = texture(textures[7], fs_in.mask_uv); break;\n"
		"			case 8: maskColor = texture(textures[8], fs_in.mask_uv); break;\n"
		"			case 9: maskColor = texture(textures[9], fs_in.mask_uv); break;\n"
		"			case 10: maskColor = texture(textures[10], fs_in.mask_uv); break;\n"
		"			case 11: maskColor = texture(textures[11], fs_in.mask_uv); break;\n"
		"			case 12: maskColor = texture(textures[12], fs_in.mask_uv); break;\n"
		"			case 13: maskColor = texture(textures[13], fs_in.mask_uv); break;\n"
		"			case 14: maskColor = texture(textures[14], fs_in.mask_uv); break;\n"
		"			case 15: maskColor = texture(textures[15], fs_in.mask_uv); break;\n"
		"			case 16: maskColor = texture(textures[16], fs_in.mask_uv); break;\n"
		"			case 17: maskColor = texture(textures[17], fs_in.mask_uv); break;\n"
		"			case 18: maskColor = texture(textures[18], fs_in.mask_uv); break;\n"
		"			case 19: maskColor = texture(textures[19], fs_in.mask_uv); break;\n"
		"			case 20: maskColor = texture(textures[20], fs_in.mask_uv); break;\n"
		"			case 21: maskColor = texture(textures[21], fs_in.mask_uv); break;\n"
		"			case 22: maskColor = texture(textures[22], fs_in.mask_uv); break;\n"
		"			case 23: maskColor = texture(textures[23], fs_in.mask_uv); break;\n"
		"			case 24: maskColor = texture(textures[24], fs_in.mask_uv); break;\n"
		"			case 25: maskColor = texture(textures[25], fs_in.mask_uv); break;\n"
		"			case 26: maskColor = texture(textures[26], fs_in.mask_uv); break;\n"
		"			case 27: maskColor = texture(textures[27], fs_in.mask_uv); break;\n"
		"			case 28: maskColor = texture(textures[28], fs_in.mask_uv); break;\n"
		"			case 29: maskColor = texture(textures[29], fs_in.mask_uv); break;\n"
		"			case 30: maskColor = texture(textures[30], fs_in.mask_uv); break;\n"
		"			case 31: maskColor = texture(textures[31], fs_in.mask_uv); break;\n"
		"			}\n"
		"	}\n"
		"	//vec4 maskColor = texture(mask_texture, fs_in.mask_uv);\n"
		"	color = texColor * maskColor * intensity;\n"
		"	//color = vec4(fs_in.tid,0,0,1);\n"
		"\n"
		"}\n";
	#pragma endregion basic_light_shader_frag_windows

	#pragma region simple_shader_vert_windows
	const char* simple_shader_vert =
		"#version 330 core\n"
		"\n"
		"layout (location = 1) in vec2 uv;\n"
		"layout (location = 2) in vec2 mask_uv;\n"
		"layout (location = 0) in vec4 position;\n"
		"layout (location = 3) in float tid;\n"
		"layout (location = 4) in float mid;\n"
		"layout (location = 5) in vec4 color;\n"
		"\n"
		"uniform mat4 pr_matrix;\n"
		"\n"
		"out DATA\n"
		"{\n"
		"	vec2 uv;\n"
		"} vs_out;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	gl_Position = pr_matrix * position;\n"
		"	vs_out.uv = uv;\n"
		"}\n";
	#pragma endregion simple_shader_vert_windows

	#pragma region simple_shader_frag_windows
	const char* simple_shader_frag =
		"#version 330 core\n"
		"\n"
		"layout (location = 0) out vec4 color;\n"
		"\n"
		"uniform sampler2D tex;\n"
		"\n"
		"in DATA\n"
		"{\n"
		"	vec2 uv;\n"
		"} fs_in;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	color = texture(tex, fs_in.uv);\n"
		"}\n";
	#pragma endregion simple_shader_frag_windows


#elif defined(BARKLEY_PLATFORM_WEB)
	#pragma region default_shader_vert_emscripten
const char* default_shader_vert = //es3 version

		"attribute highp vec4 position;\n"
		"attribute highp vec2 uv;\n"
		"attribute highp float tid;\n"
		"attribute highp vec4 color;\n"
		"\n"
		"uniform highp mat4 pr_matrix;\n"
		"uniform highp mat4 vw_matrix;\n"
		"uniform highp mat4 ml_matrix;\n"
		"\n"
		"varying highp vec4 vs_position;\n"
		"varying highp vec2 vs_uv;\n"
		"varying highp float vs_tid;\n"
		"varying highp vec4 vs_color;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	gl_Position = pr_matrix * position;\n"
		"	vs_position = position;\n"
		"	vs_uv = uv;\n"
		"	vs_tid = tid;\n"
		"	vs_color = color;\n"
		"}\n";
	#pragma endregion default_shader_vert_emscripten

	#pragma region default_shader_frag_emscripten
	const char* default_shader_frag =
		"precision highp float;\n"
		"\n"
		"uniform highp vec4 col;\n"
		"uniform highp vec2 light_pos;\n"
		"\n"
		"varying highp vec4 vs_position;\n"
		"varying highp vec2 vs_uv;\n"
		"varying highp float vs_tid;\n"
		"varying highp vec4 vs_color;\n"
		"\n"
		"uniform sampler2D texture_0;\n"
		"uniform sampler2D texture_1;\n"
		"uniform sampler2D texture_2;\n"
		"uniform sampler2D texture_3;\n"
		"uniform sampler2D texture_4;\n"
		"uniform sampler2D texture_5;\n"
		"uniform sampler2D texture_6;\n"
		"uniform sampler2D texture_7;\n"
		"uniform sampler2D texture_8;\n"
		"uniform sampler2D texture_9;\n"
		"\n"
		"\n"
		"void main()\n"
		"{\n"
		"	float intensity = 1.0 / length(vs_position.xy - light_pos);\n"
		"	vec4 texColor = vs_color;\n"
		"	if (vs_tid > 0.0)\n"
		"	{\n"
		"		int tid = int(vs_tid - 0.5);\n"
		"		if (tid == 0)\n"
		"			texColor = vs_color * texture2D(texture_0, vs_uv);\n"
		"		else if (tid == 1)\n"
		"			texColor = vs_color * texture2D(texture_1, vs_uv);\n"
		"		else if (tid == 2)\n"
		"			texColor = vs_color * texture2D(texture_2, vs_uv);\n"
		"		else if (tid == 3)\n"
		"			texColor = vs_color * texture2D(texture_3, vs_uv);\n"
		"		else if (tid == 4)\n"
		"			texColor = vs_color * texture2D(texture_4, vs_uv);\n"
		"		else if (tid == 5)\n"
		"			texColor = vs_color * texture2D(texture_5, vs_uv);\n"
		"		else if (tid == 6)\n"
		"			texColor = vs_color * texture2D(texture_6, vs_uv);\n"
		"		else if (tid == 7)\n"
		"			texColor = vs_color * texture2D(texture_7, vs_uv);\n"
		"		else if (tid == 8)\n"
		"			texColor = vs_color * texture2D(texture_8, vs_uv);\n"
		"		else if (tid == 9)\n"
		"			texColor = vs_color * texture2D(texture_9, vs_uv);\n"
		"\n"
		"	}\n"
		"	gl_FragColor = texColor * intensity;\n"
		"}\n";
	#pragma endregion default_shader_frag_emscripten

	#pragma region simple_shader_vert_web
	const char* simple_shader_vertex =
		"#version 140\n"
		 "\n"
		 "attribute vec4 position;\n"
		 "attribute vec2 uv;\n"
		 "attribute float tid;\n"
		 "attribute vec4 color;\n"
		 "\n"
		 "uniform mat4 pr_matrix;\n"
		 "\n"
		 "varying vec2 vs_uv;\n"
		 "varying float vs_tid;\n"
		 "varying vec4 vs_color;\n"
		 "\n"
		 "void main()\n"
		 "{\n"
		 "	gl_Position = pr_matrix * position;\n"
		 "	vs_uv = uv;\n"
		 "}\n";
	#pragma endregion simple_shader_vert_web

	#pragma region simple_shader_frag_web
	const char* simple_shader_fragment =
		"#version 140\n"
		 "\n"
		 "uniform sampler2D tex;\n"
		 "\n"
		 "varying vec4 vs_position;\n"
		 "varying vec2 vs_uv;\n"
		 "varying float vs_tid;\n"
		 "varying vec4 vs_color;\n"
		 "\n"
		 "void main()\n"
		 "{\n"
		 "	gl_FragColor = texture2D(tex, vs_uv);\n"
		 "}\n";
	#pragma endregion simple_shader_frag_web

#endif


	Shader* DefaultShader()
	{
		return Shader::FromSrc("Default Shader", default_shader_vert, default_shader_frag);

	}

	Shader* SimpleShader()
	{
		return Shader::FromSrc("Simple Shader", simple_shader_vert, simple_shader_frag);
	}

	Shader* BasicLightShader()
	{
		return Shader::FromSrc("Basic Light Shader", basic_light_shader_vert, basic_light_shader_frag);

	}


}}}